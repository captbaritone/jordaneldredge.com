/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import queryBlogPostsResolver from "./../../../lib/data/ContentConnection";
import queryGetContentBySlugResolver from "./../../../lib/data/Content";
import queryNotesResolver from "./../../../lib/data/ContentConnection";
import querySearchResolver from "./../../../lib/data/ContentConnection";
import { Tag as queryGetTagByNameResolver } from "./../../../lib/data/Tag";
import { GraphQLSchema, GraphQLObjectType, GraphQLList, GraphQLNonNull, GraphQLString, GraphQLInt } from "graphql";
export function getSchema(): GraphQLSchema {
    const MarkdownType: GraphQLObjectType = new GraphQLObjectType({
        name: "Markdown",
        description: "Content that can be represented as markdown.",
        fields() {
            return {
                markdownString: {
                    description: "The content encoded as a markdown string.",
                    name: "markdownString",
                    type: GraphQLString
                }
            };
        }
    });
    const SiteUrlType: GraphQLObjectType = new GraphQLObjectType({
        name: "SiteUrl",
        description: "A URL on the site.",
        fields() {
            return {
                fullyQualified: {
                    description: "The fully qualified URL.",
                    name: "fullyQualified",
                    type: GraphQLString
                },
                path: {
                    description: "Just the path portion of the URL. Excludes the protocol and domain\n\nUseful for links within the site.",
                    name: "path",
                    type: GraphQLString
                }
            };
        }
    });
    const TagType: GraphQLObjectType = new GraphQLObjectType({
        name: "Tag",
        description: "A tag that can be associated with items.",
        fields() {
            return {
                items: {
                    description: "The list of items that have this tag.",
                    name: "items",
                    type: new GraphQLList(new GraphQLNonNull(ContentType))
                },
                name: {
                    name: "name",
                    type: GraphQLString
                },
                url: {
                    name: "url",
                    type: SiteUrlType
                }
            };
        }
    });
    const TagSetType: GraphQLObjectType = new GraphQLObjectType({
        name: "TagSet",
        fields() {
            return {
                tags: {
                    name: "tags",
                    type: new GraphQLList(new GraphQLNonNull(TagType))
                }
            };
        }
    });
    const TTSAudioType: GraphQLObjectType = new GraphQLObjectType({
        name: "TTSAudio",
        description: "Auto generated audio for a content item.",
        fields() {
            return {
                byteLength: {
                    name: "byteLength",
                    type: GraphQLInt
                },
                content: {
                    name: "content",
                    type: ContentType
                },
                lastUpdated: {
                    name: "lastUpdated",
                    type: GraphQLInt
                },
                url: {
                    name: "url",
                    type: GraphQLString
                },
                vanityUrl: {
                    name: "vanityUrl",
                    type: SiteUrlType
                }
            };
        }
    });
    const ContentType: GraphQLObjectType = new GraphQLObjectType({
        name: "Content",
        fields() {
            return {
                content: {
                    name: "content",
                    type: MarkdownType
                },
                date: {
                    name: "date",
                    type: GraphQLString
                },
                markdownUrl: {
                    description: "Url to download the post as a markdown file.",
                    name: "markdownUrl",
                    type: SiteUrlType
                },
                slug: {
                    name: "slug",
                    type: GraphQLString
                },
                summary: {
                    name: "summary",
                    type: GraphQLString
                },
                summaryImage: {
                    name: "summaryImage",
                    type: GraphQLString
                },
                tagSet: {
                    name: "tagSet",
                    type: TagSetType
                },
                title: {
                    name: "title",
                    type: GraphQLString
                },
                ttsAudio: {
                    description: "The audio version of this content, if it exists.",
                    name: "ttsAudio",
                    type: TTSAudioType
                },
                url: {
                    name: "url",
                    type: SiteUrlType
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                blogPosts: {
                    description: "Formal write-ups of projects and ideas.",
                    name: "blogPosts",
                    type: new GraphQLList(new GraphQLNonNull(ContentType)),
                    resolve() {
                        return queryBlogPostsResolver.blogPosts();
                    }
                },
                getContentBySlug: {
                    description: "Find a piece of content by its slug.",
                    name: "getContentBySlug",
                    type: ContentType,
                    args: {
                        slug: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return queryGetContentBySlugResolver.getBySlug(args.slug);
                    }
                },
                getTagByName: {
                    description: "Get a tag by name.",
                    name: "getTagByName",
                    type: TagType,
                    args: {
                        name: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return queryGetTagByNameResolver.getTagByName(args.name);
                    }
                },
                notes: {
                    description: "Quick thoughts, observations, and links.",
                    name: "notes",
                    type: new GraphQLList(new GraphQLNonNull(ContentType)),
                    resolve() {
                        return queryNotesResolver.notes();
                    }
                },
                search: {
                    description: "Search for content by title, content, or tags.",
                    name: "search",
                    type: new GraphQLList(new GraphQLNonNull(ContentType)),
                    args: {
                        query: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return querySearchResolver.search(args.query);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [ContentType, MarkdownType, QueryType, SiteUrlType, TTSAudioType, TagType, TagSetType]
    });
}
