# Schema generated by Grats (https://grats.capt.dev)
# Do not manually edit. Regenerate by running `npx grats`.
enum SortOption {
  best
  latest
}

"""An audio file which has been embedded in a piece of content."""
type AudioFile {
  src: String
  url: String
}

type Content {
  content: Markdown
  """YYYY-MM-DD in Local Time (PST)"""
  date: String
  """Url to download the post as a markdown file."""
  markdownUrl: SiteUrl
  slug: String
  summary: String
  summaryImage: String
  tagSet: TagSet
  title: String
  """The audio version of this content, if it exists."""
  ttsAudio: TTSAudio
  url: SiteUrl
}

"""An image which has been embedded in a piece of content."""
type Image {
  height: Int
  src: String
  width: Int
}

"""A link which has been embedded in a piece of content."""
type Link {
  url: String
}

"""Content that can be represented as markdown."""
type Markdown {
  audioFiles: [AudioFile!]
  images: [Image!]
  links: [Link!]
  """The content encoded as a markdown string."""
  markdownString: String
  tweets: [Tweet!]
  youtubeVideos: [YoutubeVideo!]
}

type Query {
  audioFiles: [AudioFile!]
  """Formal write-ups of projects and ideas."""
  blogPosts: [Content!]
  """Search for content by title, content, or tags."""
  experimentalSearch(searchQuery: String!): [Content!]
  """Find a piece of content by its slug."""
  getContentBySlug(slug: String!): Content
  """Get a tag by name."""
  getTagByName(name: String!): Tag
  images: [Image!]
  links: [Link!]
  """Quick thoughts, observations, and links."""
  notes: [Content!]
  """Search for content by title, content, or tags."""
  search(query: String!, sort: SortOption!): [Content!]
  tweets: [Tweet!]
  youtubeVideos: [YoutubeVideo!]
}

"""A URL on the site."""
type SiteUrl {
  """The fully qualified URL."""
  fullyQualified: String
  """
  Just the path portion of the URL. Excludes the protocol and domain
  
  Useful for links within the site.
  """
  path: String
}

"""Auto generated audio for a content item."""
type TTSAudio {
  byteLength: Int
  content: Content
  lastUpdated: Int
  url: String
  vanityUrl: SiteUrl
}

"""A tag that can be associated with items."""
type Tag {
  """The list of items that have this tag."""
  items: [Content!]
  name: String
  url: SiteUrl
}

type TagSet {
  tags: [Tag!]
}

"""A Tweet which has been embedded in a piece of content."""
type Tweet {
  statusId: String
  url: String
}

"""A Youtube video which has been embedded in a piece of content."""
type YoutubeVideo {
  embedUrl: String
  thumbnailUrl: String
  token: String
  url: String
  vertical: Boolean
}
